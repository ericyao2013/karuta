#! /usr/bin/python

# Copyright Yusuke Tabata 2007-2019


import os
import re
import sys
import tempfile

import test_files

print("Running tests")
os.putenv("KARUTA_DIR", "../lib/")
karuta_binary="../karuta-bin"
iroha_binary=""
verilog_compiler="iverilog"
default_tb="test_tb.v"

tmp_prefix = "/tmp"

class TestSummary():
    def __init__(self):
        self.total_failures = 0
        self.total_unexpected_aborts = 0
        self.num_tests = 0
        self.num_vl_tests = 0
        self.num_aborts = 0
        self.num_verilog_compile_errors = 0
        self.failed_tests = []
        self.aborted_tests = []

    def PrintSummary(self):
        print("Number of verilog tests:%d" % self.num_vl_tests)
        print("Number of tests:%d" % self.num_tests)
        print("Number of aborted tests:%d" % self.num_aborts)
        print("Number of unexpectedly aborted tests:%d" %
              self.total_unexpected_aborts)
        print("Number of verilog compile failures:%d" %
              self.num_verilog_compile_errors)
        print("Total unexpected Failures:%d" % self.total_failures)
        if self.failed_tests:
            print(self.failed_tests)
        if self.aborted_tests:
            print("aborted tests:" + str(self.aborted_tests))

    def AddResult(self, test_name, num_fails, ign_fail,
                  done_stat, exp_abort, exp_fails):
        if num_fails != exp_fails and (not ign_fail):
            print("Unexpected fails %d (exp%d)" % (num_fails, exp_fails))
            self.total_failures += num_fails
            self.failed_tests.append(test_name)
        if not done_stat and not exp_abort:
            print("Unexpected abort")
            self.total_unexpected_aborts += 1
            self.aborted_tests.append(test_name)
        self.num_tests += 1

    def AddVerilogResult(self, test_name, num_fails, ign_fail, exp_fails):
        self.num_vl_tests += 1
        if num_fails != exp_fails and (not ign_fail):
            print("unexpected failure in vlfile")
            self.total_failures += num_fails
            self.failed_tests.append(test_name)

    def AddVerilogCompileFailure(self, test_name):
        self.num_verilog_compile_errors += 1
        self.failed_tests.append(test_name)

    def AddAbort(self, rv):
        self.num_aborts += 1;


class KarutaTest():
    def __init__(self, source_fn):
        self.source_fn = source_fn

    def CheckLog(self, fn):
        num_fails = 0
        done_stat = 0
        ifh = open(fn, "r")
        for line in ifh:
            if re.search("ASSERTION FAILURE", line):
                num_fails = num_fails + 1
            if re.search("ASSERTION UNDEFINED", line):
                num_fails = num_fails + 1
            if re.search("KARUTA DONE", line):
                done_stat = 1
                if re.search("error", line):
                    num_fails = num_fails + 1
        return {"num_fails":num_fails,
                "done_stat":done_stat}

    def ReadTestInfo(self, fn):
        test_info = {"exp_fails":0,
                     "vl_exp_fails":0,
                     "karuta_ignore_errors":0,
                     "exp_abort":0}
        dn = os.path.dirname(fn)
        if dn != "":
            dn = dn + "/"
        test_info["dirname"] = dn
        ifh = open(fn, "r")
        for line in ifh:
            m = re.search("KARUTA_EXPECTED_ERRORS: (\d+)", line)
            if m:
                test_info["exp_fails"] = int(m.group(1))
            m = re.search("VERILOG_EXPECTED_ERRORS: (\d+)", line)
            if m:
                test_info["vl_exp_fails"] = int(m.group(1))
            m = re.search("VERILOG_OUTPUT: (\S+)", line)
            if m:
                test_info["verilog"] = m.group(1)
            m = re.search("VERILOG_TB: (\S+)", line)
            if m:
                test_info["verilog_tb"] = m.group(1)
            m = re.search("KARUTA_IGNORE_ERRORS:", line)
            if m:
                test_info["karuta_ignore_errors"] = 1
            m = re.search("KARUTA_TIMEOUT: (\d+)", line)
            if m:
                test_info["karuta_timeout"] = int(m.group(1))
            m = re.search("KARUTA_EXPECT_ABORT:", line)
            if m:
                test_info["exp_abort"] = 1
            m = re.search("KARUTA_SPLIT_TEST: (\S+)", line)
            if m:
                test_info["split_info"] = m.group(1)
        return test_info

    def GetVerilogCompileCommand(self, dut_fn, tb_fn, test_bin_fn):
        ifh = open(dut_fn, "r")
        has_mem_if = False
        has_iroha_mem_if = False
        has_iroha_sram = False
        for line in ifh:
            m = re.search("EXTERNAL_RAM", line)
            if m:
                has_mem_if = True
            m = re.search("sram_addr", line)
            if m:
                has_iroha_mem_if = True
            m = re.search("SRAM_", line)
            if m:
                has_iroha_sram = True
        cmd = (verilog_compiler + " -o " + test_bin_fn + " " +
               dut_fn + " " + tb_fn + " -I../lib")
        if has_iroha_sram:
            has_iroha_mem_if = False
        if has_mem_if:
            cmd += " -D KARUTA_RAM"
            cmd += " -D KARUTA_RAM1"
        if has_iroha_mem_if:
            cmd += " -D KARUTA_RAM"
            cmd += " -D KARUTA_RAM2"
        return cmd

    def CheckVerilog(self, fn, summary, test_info):
        test_bin_fn = tempfile.mktemp()
        test_log_fn = tempfile.mktemp()
        if "verilog_tb" in test_info:
            tb_fn = test_info["dirname"] + test_info["verilog_tb"]
        else:
            tb_fn = default_tb
        cmd = self.GetVerilogCompileCommand(fn, tb_fn, test_bin_fn)
        print("  compiling " + fn + "(" + cmd + ")")
        os.system(cmd)
        if not os.path.isfile(test_bin_fn):
            summary.AddVerilogCompileFailure(self.source_fn)
            return
        test_cmd = test_bin_fn + ">" + test_log_fn
        print ("  running verilog executable " + test_bin_fn +
               "(" + test_cmd + ")")
        os.system(test_cmd)
        res = self.CheckLog(test_log_fn)
        num_fails = res["num_fails"]
        exp_fails = test_info["vl_exp_fails"]
        summary.AddVerilogResult(self.source_fn, num_fails,
                                 test_info["karuta_ignore_errors"],
                                 exp_fails)
        try:
            os.unlink(test_bin_fn)
            os.unlink(test_log_fn)
        except:
            pass

    def GetKarutaCommand(self, tf, test_info):
        vanilla = "--vanilla"
        if "verilog" in test_info:
            # verilog tests requires imported modules.
            vanilla = ""
        timeout = "1000"
        if "karuta_timeout" in test_info:
            timeout = str(test_info["karuta_timeout"])
        cmd = "KARUTA_DIR=../lib "
        cmd += karuta_binary + " " + self.source_fn + " " + vanilla
        if iroha_binary != "":
            cmd += " --iroha_binary " + iroha_binary
        cmd += " --root " + tmp_prefix
        cmd += " --timeout " + timeout + " "
        cmd += " --print_exit_status "
        cmd += " --module_prefix=mod "
        cmd += " > " + tf
        return cmd

    def RunTest(self, summary):
        test_info = self.ReadTestInfo(self.source_fn)
        tf = tempfile.mktemp()
        cmd = self.GetKarutaCommand(tf, test_info)
        if "verilog" in test_info:
            try:
                os.unlink(tmp_prefix + "/" + test_info["verilog"])
            except:
                pass
        print("executing test " + self.source_fn)
        if "split_info" in test_info:
            print(" split: " + str(test_info["split_info"]))
        print(" command line=" + cmd)
        rv = os.system(cmd)
        if rv:
            summary.AddAbort(rv)
        if rv == 0 and "verilog" in test_info:
            self.CheckVerilog(tmp_prefix + "/" + test_info["verilog"],
                              summary, test_info)
        res = self.CheckLog(tf)
        num_fails = res["num_fails"]
        done_stat = res["done_stat"]
        exp_fails = test_info["exp_fails"]
        exp_abort = test_info["exp_abort"]
        summary.AddResult(self.source_fn,
                          num_fails,
                          test_info["karuta_ignore_errors"],
                          done_stat, exp_abort, exp_fails)
        os.unlink(tf)


class TestManager:
    def __init__(self, sources):
        self.sources = sources

    def IsCompoundTest(self, source):
        ifh = open(source, "r")
        for line in ifh:
            if re.search("KARUTA_COMPOUND_TEST", line):
                return True
        return False

    def SplitTest(self, source):
        files = []
        ifh = open(source, "r")
        of = tempfile.mktemp()
        ofh = open(of, "w")
        ln = 0
        lnstr = ""
        for line in ifh:
            ln = ln + 1
            lnstr = "\n// KARUTA_SPLIT_TEST: " + source + ":" + str(ln) + "\n"
            if re.search("KARUTA_NEXT_TEST", line):
                files.append(of)
                ofh.write(lnstr)
                ofh.close()
                of = tempfile.mktemp()
                ofh = open(of, "w")
            else:
                ofh.write(line)
        files.append(of)
        ofh.write(lnstr)
        ofh.close()
        return files

    def Run(self):
        summary = TestSummary()
        for source in self.sources:
            if self.IsCompoundTest(source):
                tests = self.SplitTest(source)
                print (" Split into " + str(len(tests)) + "compound tests" +
                       " from " + source)
                for fract in tests:
                    t = KarutaTest(fract)
                    t.RunTest(summary)
                    os.unlink(fract)
            else:
                t = KarutaTest(source)
                t.RunTest(summary)
        summary.PrintSummary()

test_sources = []

if len(sys.argv) > 1:
    args = sys.argv[1:]
    while len(args) > 0:
        arg = args[0]
        args = args[1:]
        if arg == "--iroha_binary":
            iroha_binary = args[0]
            args = args[1:]
            continue
        test_sources.append(arg)

if not test_sources:
    test_sources = test_files.default_tests

tm = TestManager(test_sources)
tm.Run()
