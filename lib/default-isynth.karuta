// Wrapper methods.
// Adding __ prefix so that users can overwrite the original one.
print("default-isynth.karuta loaded")

// Alias for convenience
var Kernel.M object = Kernel

// Utility to create a vanilla object.
var Kernel.Kernel_ object = Kernel.clone()

def Kernel.new() (object) {
  return Kernel_.clone()
}

def Kernel.compile() {
  __compile("")
  __compile("clean,array_to_mem,wire_insn,clean")
}

@embed(resource = "wait_cycles",
 verilog = "karuta_wait.v",
 file= "copy",
 module= "wait_cycles")
def Kernel.__wait(cycles int) {
}

@embed(resource = "exit",
 verilog = "karuta_exit.v",
 file = "copy",
 module = "karuta_exit")
def Kernel.__exit() {
}

def Array.load(maddr #64, aaddr #32, len #32) {
  axiLoad(maddr, aaddr, len - 1)
}

def Array.store(maddr #64, aaddr #32, len #32) {
  axiStore(maddr, aaddr, len - 1)
}
