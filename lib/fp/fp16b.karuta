// bfloat16
// WIP
//

var Numerics.FP16B object = new()

var FP16B object = Numerics.FP16B
var Numerics.bfloat16 object = Numerics.FP16B

func FP16B.Build(s #0, e #8, f #7) (#16) {
  return s :: e :: f
}

func FP16B.Add(x, y #16) (#16) {
  return addsub4of5(addsub3of5(addsub2of5(addsub1of5(addsub0of5(x, y, 0)))))
}

func FP16B.Sub(x, y #16) (#16) {
  return addsub4of5(addsub3of5(addsub2of5(addsub1of5(addsub0of5(x, y, 1)))))
}

func FP16B.Mul(x, y #16) (#16) {
  return mul1of2(mul0of2(x, y))
}

@ExtCombinational(resource="fp16bmul0", verilog="fp/fp16bmul.v", module="FP16BMulS0Of2", file="copy")
func FP16B.mul0of2(a0, a1 #16) (#0, #8, #8, #9) {
  var ret0 #0
  var ret1, ret2 #8
  var ret3 #12
  ret0 = a0[15:15] ^ a0[15:15]
  ret1 = a0[14:7]
  ret2 = a1[14:7]
  var e0, e1 #1
  if ret1 == 0 {
    e0 = 0
  } else {
    e0 = 1
  }
  if ret2 == 0 {
    e1 = 0
  } else {
    e1 = 1
  }
  var ff0 #8 = e0 :: a0[6:0]
  var ff1 #8 = e1 :: a1[6:0]
  var z #16 = ff0 * ff1
  ret3 = z[15:7]
  return ret0, ret1, ret2, ret3
}

@ExtCombinational(resource="fp16bmul1", verilog="fp/fp16bmul.v", module="FP16BMulS1Of2", file="copy")
func FP16B.mul1of2(a0 #0, a1, a2 #8, a3 #9) (#16) {
  var ret0 #16
  var e #9
  e = a1 + a2
  if a3[8:8] == 1 {
    e = e + 1
  }
  var uf #0 = 0
  if e > 127 {
    e = e - 127
    if e > 255 {
       e = 255
    }
  } else {
    e = 0
    uf = 1
  }
  var c #7
  if uf == 1 {
    c = 0
  } else if (a3[8:8] == 1) {
    c = a3[7:1]
  } else {
    c = a3[6:0]
  }
  ret0 = a0 :: e[7:0] :: c
  return ret0
}

// @ExtCombinational(resource="fp16baddsub0", verilog="fp/fp16baddsub.v", module="FP16BAddSubS0Of5", file="copy")
func FP16B.addsub0of5(x, y #16, is_sub #0) (#16, #16, #0, #0) {
  var ys #0
  if is_sub == 1 {
    ys = !y[15:15]
  } else {
    ys = y[15:15]
  }
  var yy #16 = ys :: y[14:0]
  var lhs, rhs #16
  var xe #8 = x[14:7]
  var ye #8 = y[14:7]
  var lhs, rhs #16
  if xe < ye {
    lhs = yy
    rhs = x
  } else {
    rhs = yy
    lhs = x
  }
  var diff_sign #0 = x[15:15] ^ yy[15:15]
  var neg_lhs #0 = 0
  var neg_rhs #0 = 0
  if diff_sign == 1 {
    neg_lhs = lhs[15:15]
    neg_rhs = rhs[15:15]
  }
  return lhs, rhs, neg_lhs, neg_rhs
}

// @ExtCombinational(resource="fp16baddsub1", verilog="fp/fp16baddsub.v", module="FP16BAddSubS1Of5", file="copy")
func FP16B.addsub1of5(x, y #16, xn, yn #0) (#0, #0, #15, #15, #8, #0, #0) {
  var xe #8 = x[14:7]
  var ye #8 = y[14:7]
  var d #9 = xe - ye
  var xr #7 = x[6:0]
  if xn == 1 {
    xr = ~xr
  }
  var ys #1 = 0
  if ye > 0 {
    ys = 1
  }
  var yy #8 = ys :: y[6:0]
  var yr #15
  if d <= 7 {
    var a #9 = 7 - d
    yr = yy
    if a[2:2] == 1 {
      yr = yr << 4
    }
    if a[1:1] == 1 {
      yr = yr << 2
    }
    if a[0:0] == 1 {
      yr = yr << 1
    }
  } else {
    yr = 0
  }
  if yn == 1 {
    yr = ~yr
  }
  return x[15:15], y[15:15], xr, yr, xe, xn, yn
}

// @ExtCombinational(resource="fp16baddsub2", verilog="fp/fp16baddsub.v", module="FP16BAddSubS2Of5", file="copy")
func FP16B.addsub2of5(xs, ys #0, xr, yr #15, xe #8, xn, yn #0) (#16, #0, #0, #8, #0, #0) {
  var r #16 = xr + yr
  if xn || yn {
    r += 1
  }
  return r, xs, ys, xe, xn, yn
}

// @ExtCombinational(resource="fp16baddsub3", verilog="fp/fp16baddsub.v", module="FP16BAddSubS3Of5", file="copy")
func FP16B.addsub3of5(r #16, xs, ys #0, e #8, xn, yn #0) (#15, #0, #0, #8, #0, #0, #0) {
  var neg #0 = 0
  var c #1 = r[15:15]
  if xn == yn {
    if c == 1 {
      e++
      if e == 0 {
        e = 31
      }
      r = r[15:1]
    }
  } else {
    if c == 0 {
      r = ~r
      r += 1
      neg = true
    }
  }
  return r, xs, ys, e, neg, xn, yn
}

// @ExtCombinational(resource="fp16baddsub4", verilog="fp/fp16baddsub.v", module="FP16BAddSubS4Of5", file="copy")
func FP16B.addsub4of5(r #15, xs, ys #0, e #8, neg, xn, yn #0) (#16) {
  var e_adjust #8 = e
  if xn || yn {
    if r[14:7] == 0 {
      e_adjust = e_adjust - 8
      r <<= 8
    }
    if r[14:11] == 0 {
      e_adjust = e_adjust - 4
      r <<= 4
    }
    if r[14:13] == 0 {
      e_adjust = e_adjust - 2
      r <<= 2
    }
    if r[14:14] == 0 {
      e_adjust = e_adjust - 1
      r <<= 1
    }
    if e_adjust[5:5] == 1 {
      // underflow.
      e_adjust = 0
    }
  }
  var f #7 = r[13:7]
  var s #0 = 0
  if xn != yn {
    if yn == 1 {
      s = neg ^ xs
    } else {
      s = neg ^ ys
    }
  } else {
    s = xs
  }
  return s :: e[7:0] :: f
}
