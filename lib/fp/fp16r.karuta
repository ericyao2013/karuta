// Regular/Relaxed version of FP16.
// Not yet tested.
//

var Numerics.FP16R object = new()

var FP16R object = Numerics.FP16R

func FP16R.Build(s #0, e #5, f #10) (#16) {
  return s :: e :: f
}

func FP16R.Add(x, y #16) (#16) {
  return addsub4of5(addsub3of5(addsub2of5(addsub1of5(addsub0of5(x, y, 0)))))
}

func FP16R.Sub(x, y #16) (#16) {
  return addsub4of5(addsub3of5(addsub2of5(addsub1of5(addsub0of5(x, y, 1)))))
}

func FP16R.Mul(x, y #16) (#16) {
  return mul1of2(mul0of2(x, y))
}

@ExtCombinational(resource="fp16rmul0", verilog="fp/fp16rmul.v", module="FP16RMulS0Of2", file="copy")
func FP16R.mul0of2(a0, a1 #16) (#0, #5, #5, #12) {
  var ret0 #0
  var ret1, ret2 #5
  var ret3 #12
  ret0 = a0[15:15] ^ a0[15:15]
  ret1 = a0[14:10]
  ret2 = a1[14:10]
  var e0, e1 #1
  if ret1 == 0 {
    e0 = 0
  } else {
    e0 = 1
  }
  if ret2 == 0 {
    e1 = 0
  } else {
    e1 = 1
  }
  var ff0 #10 = e0 :: a0[9:0]
  var ff1 #10 = e1 :: a1[9:0]
  var z #22 = ff0 * ff1
  ret3 = z[21:10]
  return ret0, ret1, ret2, ret3
}

@ExtCombinational(resource="fp16rmul1", verilog="fp/fp16rmul.v", module="FP16RMulS1Of2", file="copy")
func FP16R.mul1of2(a0 #0, a1, a2 #5, a3 #12) (#16) {
  var ret0 #16
  var e #6
  e = a1 + a2 - 15 + a3[11:11]
  var c #10
  if (a3[11:11] == 1) {
    c = a3[10:1]
  } else {
    c = a3[9:0]
  }
  ret0 = a0 :: e[4:0] :: c
  return ret0
}

@ExtCombinational(resource="fp16addsub1", verilog="fp/fp16raddsub.v", module="FP16RAddSubS0Of5", file="copy")
func FP16R.addsub0of5(x, y #16, is_sub #0) (#16, #16, #0, #0) {
  var ys #0
  if is_sub == 1 {
    ys = !y[15:15]
  } else {
    ys = y[15:15]
  }
  var yy #16 = ys :: y[14:0]
  var lhs, rhs #16
  var xe #5 = x[14:10]
  var ye #5 = y[14:10]
  var lhs, rhs #16
  if xe < ye {
    lhs = yy
    rhs = x
  } else {
    rhs = yy
    lhs = x
  }
  var diff_sign #0 = x[15:15] ^ yy[15:15]
  var neg_lhs #0 = 0
  var neg_rhs #0 = 0
  if diff_sign == 1 {
    neg_lhs = lhs[15:15]
    neg_rhs = rhs[15:15]
  }
  return lhs, rhs, neg_lhs, neg_rhs
}

@ExtCombinational(resource="fp16addsub1", verilog="fp/fp16raddsub.v", module="FP16RAddSubS1Of5", file="copy")
func FP16R.addsub1of5(x, y #16, xn, yn #0) (#0, #0, #21, #21, #5, #0, #0) {
  var xe #5 = x[14:10]
  var ye #5 = y[14:10]
  var d #6 = xe - ye
  var xr #10 = x[9:0]
  var xs #1 = 0
  if xe > 0 {
    xs = 1
  }
  var x0 #10 = 0
  var xx #21 = xs :: xr :: x0
  if xn == 1 {
    xr = ~xr
  }
  var ys #1 = 0
  if ye > 0 {
    ys = 1
  }
  var yy #11 = ys :: y
  var yr #21
  if d <= 10 {
    var a #6 = 10 - d
    yr = yy
    if a[3:3] == 1 {
      yr = yr << 8
    }
    if a[2:2] == 1 {
      yr = yr << 4
    }
    if a[1:1] == 1 {
      yr = yr << 2
    }
    if a[0:0] == 1 {
      yr = yr << 1
    }
  } else {
    yr = 0
  }
  if yn == 1 {
    yr = ~yr
  }
  return x[15:15], y[15:15], xr, yr, xe, xn, yn
}

@ExtCombinational(resource="fp16addsub1", verilog="fp/fp16raddsub.v", module="FP16RAddSubS2Of5", file="copy")
func FP16R.addsub2of5(xs, ys #0, xr, yr #21, xe #5, xn, yn #0) (#22, #0, #0, #5, #0, #0) {
  var r #22 = xr + yr
  if xn || yn {
    r += 1
  }
  return r, xs, ys, xe, xn, yn
}

@ExtCombinational(resource="fp16addsub1", verilog="fp/fp16raddsub.v", module="FP16RAddSubS3Of5", file="copy")
func FP16R.addsub3of5(r #22, xs, ys #0, e #5, xn, yn #0) (#21, #0, #0, #5, #0, #0, #0) {
  var neg #0 = 0
  var c #1 = r[21:21]
  if xn == yn {
    if c == 1 {
      e++
      if e == 0 {
        e = 31
      }
      r = r[21:1]
    }
  } else {
    if c == 0 {
      r = ~r
      r += 1
      neg = true
    }
  }
  return r, xs, ys, e, neg, xn, yn
}

@ExtCombinational(resource="fp16addsub1", verilog="fp/fp16raddsub.v", module="FP16RAddSubS4Of5", file="copy")
func FP16R.addsub4of5(r #21, xs, ys #0, e #5, neg, xn, yn #0) (#16) {
  if xn || yn {
    if r[20:13] == 0 {
      e = e - 8
      r <<= 8
    }
    if r[20:17] == 0 {
      e = e - 4
      r <<= 4
    }
    if r[20:19] == 0 {
      e = e - 2
      r <<= 2
    }
    if r[20:20] == 0 {
      e = e - 1
      r <<= 1
    }
  }
  var f #10 = r[19:10]
  var s #0 = 0
  if xn != yn {
    if yn == 1 {
      s = neg ^ xs
    } else {
      s = neg ^ ys
    }
  } else {
    s = xs
  }
  return s :: e :: f
}
