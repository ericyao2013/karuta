// Regular/Relaxed version of FP16.
// Not yet tested.
//

var Numerics.FP16R object = new()

var FP16R object = Numerics.FP16R

func FP16R.Build(s #0, e #5, f #10) (#16) {
  return s :: e :: f
}

func FP16R.Add(x, y #16) (#16) {
  return addsub3of4(addsub2of4(addsub1of4(addsub0of4(x, y, 0))))
}

func FP16R.Mul(x, y #16) (#16) {
  return mul1of2(mul0of2(x, y))
}

@ExtCombinational(resource="fp16rmul0", verilog="fp/fp16rmul.v", module="FP16RMulS0Of2", file="copy")
func FP16R.mul0of2(a0, a1 #16) (#0, #5, #5, #12) {
  var ret0 #0
  var ret1, ret2 #5
  var ret3 #12
  ret0 = a0[15:15] ^ a0[15:15]
  ret1 = a0[14:10]
  ret2 = a1[14:10]
  var e0, e1 #1
  if ret1 == 0 {
    e0 = 0
  } else {
    e0 = 1
  }
  if ret2 == 0 {
    e1 = 0
  } else {
    e1 = 1
  }
  var ff0 #10 = e0 :: a0[9:0]
  var ff1 #10 = e1 :: a1[9:0]
  var z #22 = ff0 * ff1
  ret3 = z[21:10]
  return ret0, ret1, ret2, ret3
}

@ExtCombinational(resource="fp16rmul1", verilog="fp/fp16rmul.v", module="FP16RMulS1Of2", file="copy")
func FP16R.mul1of2(a0 #0, a1, a2 #5, a3 #12) (#16) {
  var ret0 #16
  var e #6
  e = a1 + a2 - 15 + a3[11:11]
  var c #10
  if (a3[11:11] == 1) {
    c = a3[10:1]
  } else {
    c = a3[9:0]
  }
  ret0 = a0 :: e[4:0] :: c
  return ret0
}

@ExtCombinational(resource="fp16addsub1", verilog="fp/fp16raddsub.v", module="FP16RAddSubS0Of4", file="copy")
func FP16R.addsub0of4(a0, a1 #16, a2 #0) (#16, #16, #0, #0, #0) {
  return 0, 0, 0, 0, 0
}

@ExtCombinational(resource="fp16addsub1", verilog="fp/fp16raddsub.v", module="FP16RAddSubS1Of4", file="copy")
func FP16R.addsub1of4(a0, a1 #16, a2, a3, a4 #0) (#12, #21, #5, #0) {
  return 0, 0, 0, 0
}

@ExtCombinational(resource="fp16addsub1", verilog="fp/fp16raddsub.v", module="FP16RAddSubS2Of4", file="copy")
func FP16R.addsub2of4(a0 #12, a1 #21, a2 #5, a3 #0) (#5, #22) {
  return 0, 0
}

@ExtCombinational(resource="fp16addsub1", verilog="fp/fp16raddsub.v", module="FP16RAddSubS3Of4", file="copy")
func FP16R.addsub3of4(a0 #5, a1 #22) (#16) {
  return 0
}
