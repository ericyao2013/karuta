// DEVELOPMENT TARGET TO PORT TO NLI

// // Mersenne twister

// // Create a length 624 array to store the state of the generator
//  int[0..623] MT
//  int index = 0
 
//  // Initialize the generator from a seed
//  function initializeGenerator(int seed) {
//      MT[0] := seed
//      for i from 1 to 623 { // loop over each other element
//          MT[i] := last 32 bits of(1812433253 * (MT[i-1] xor (right shift by 30 bits(MT[i-1]))) + i) // 0x6c078965
//      }
//  }
 
//  // Extract a tempered pseudorandom number based on the index-th value,
//  // calling generateNumbers() every 624 numbers
//  function extractNumber() {
//      if index == 0 {
//          generateNumbers()
//      }
     
//      int y := MT[index]
//      y := y xor (right shift by 11 bits(y))
//      y := y xor (left shift by 7 bits(y) and (2636928640)) // 0x9d2c5680
//      y := y xor (left shift by 15 bits(y) and (4022730752)) // 0xefc60000
//      y := y xor (right shift by 18 bits(y))
     
//      index := (index + 1) mod 624
//      return y
//  }
 
//  // Generate an array of 624 untempered numbers
//  function generateNumbers() {
//      for i from 0 to 623 {
//          int y := 32nd bit of(MT[i]) + last 31 bits of(MT[(i+1) mod 624])
//          MT[i] := MT[(i + 397) mod 624] xor (right shift by 1 bit(y))
//          if (y mod 2) == 1 { // y is odd
//              MT[i] := MT[i] xor (2567483615) // 0x9908b0df
//          }
//      }
//  }

shared MT object = Kernel.clone();
shared Global.MT object = MT;

shared MT.MT int[1024] = {0};
shared MT.seed int = 0;
shared MT.index int = 0;

func MT.initializeGenerator() {
  MT[0] = seed;
  var i int;
  for i = 1; i < 624; ++i {
    var prev int = MT[i - 1];
    var cur #64;
    cur = (1812433253 * (prev ^ (prev >> 30)) + i);
    MT[i] = cur[31:0];
  }
}

func MT.extractNumbers() (int) {
  if (index == 0) {
    generateNumbers();
  }
  var y int = MT[index];
  y = y ^ (y >> 11);
  y = y ^ ((y << 7) & 2636928640);
  y = y ^ ((y << 15) & 4022730752);
  y = y ^ (y >> 18);

  index = index + 1;
  if (index > 623) {
    index -= 624;
  }
  return y;
}

func MT.generateNumbers() {
  var i int;
  for i = 0; i < 624; ++i {
    var next_idx int = i + 1;
    if (next_idx > 623) {
      next_idx = 0;
    }
    var y int = (MT[i] & 0x80000000) | MT[next_idx][30:0];
    var next_idx_397 int = i + 397;
    if (next_idx_397 > 623) {
      next_idx_397 -= 624;
    }
    MT[i] = MT[next_idx_397] ^ (y >> 1);
    if ((y & 1) == 1) {
      MT[i] = MT[i] ^ 2567483615;
    }
  }
}

func MT.main() {
  initializeGenerator();
  var addr int = 0
  var i int;
  for i = 0; i < 624; ++i {
    Memory.write(addr, extractNumbers())
    addr++
  }
}
//MT.main();

if (Env.isMain()) {
  MT.setDump("/tmp/a");
  MT.compile();
  MT.writeHdl("mt.v");
  MT.writeHdl("mt.cpp");
}
